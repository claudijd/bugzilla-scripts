#!/usr/bin/env python
import bugsy
import getpass
import json
import sys


# For colored output
RED   = "\033[1;31m"
YELLOW = "\033[1;93m"
BLUE  = "\033[1;34m"
CYAN  = "\033[1;36m"
GREEN = "\033[0;32m"
RESET = "\033[0;0m"
BOLD    = "\033[;1m"
REVERSE = "\033[;7m"
whiteboard_error = False

api_key = getpass.getpass("Enter Bugzilla API Key: ")

try:
    bugzilla = bugsy.Bugsy(api_key=api_key)
    bugs = bugzilla.search_for\
        .product('Enterprise Information Security')\
        .component('Penetration Test')\
        .search()

except bugsy.errors.SearchException as APIkeyError:
    sys.stdout.write(RED)
    print(APIkeyError.args[0])
    sys.stdout.write(RESET)
    sys.exit()

bug_metrics = []

for bug in bugs:
    if bug.status == "RESOLVED" and bug.resolution == "FIXED":
        # Check if no content on whiteboard, likely forgot to update the bug
        if (bug._bug['whiteboard']):
            raw_whiteboard = bug._bug['whiteboard']
            try:
                whiteboard = dict(x.split('=') for x in raw_whiteboard.split(' '))
                bug_metrics.append({'id':bug.id, 'summary':bug.summary, 'whiteboard':whiteboard})
            except:
                sys.stdout.write(RED)
                print("[ERROR]: Unexpected/unrecognized whiteboard content for bug "\
                + bug.id.__str__() + ". Please update the bug and run the script again.")
                sys.stdout.write(RESET)
                whiteboard_error = True
                break

        else:
            sys.stdout.write(RED)
            print("[ERROR]: Whiteboard content of bug: "\
            + bug.id.__str__() + " not found, please update the bug "\
            "and run the script again.")
            sys.stdout.write(RESET)
            whiteboard_error = True
            break

if (whiteboard_error):
    sys.exit()

# Send this somewhere for further analytics/graphs/rainbows/etc.
print(json.JSONEncoder().encode(bug_metrics))
