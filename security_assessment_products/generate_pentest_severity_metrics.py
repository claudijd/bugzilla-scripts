#!/usr/bin/env python
import requests
import bugsy
import getpass
import json
import pprint

def print_severities(dict):
  print("  -Maximum: " + str(dict["MAXIMUM"]))
  print("  -High: " + str(dict["HIGH"]))
  print("  -Medium: " + str(dict["MEDIUM"]))
  print("  -Low: " + str(dict["LOW"]))

api_key = getpass.getpass("Enter Bugzilla API Key: ")

bugzilla = bugsy.Bugsy(api_key=api_key)
bugs = bugzilla.search_for\
        .product('Enterprise Information Security')\
        .component('Penetration Test')\
        .search()

# Generate stuff for assessments
assessment_severity_hist = {
  'MAXIMUM': 0,
  'HIGH': 0,
  'MEDIUM': 0,
  'LOW': 0
}

for bug in bugs:
    if bug.status == "RESOLVED" and bug.resolution == "FIXED":
        raw_whiteboard = bug._bug['whiteboard']
        whiteboard = dict(x.split('=') for x in raw_whiteboard.split(' '))
        if whiteboard.get('MAXIMUM') is not None:
            assessment_severity_hist['MAXIMUM'] += int(whiteboard.get('MAXIMUM'))
        if whiteboard.get('HIGH') is not None:
            assessment_severity_hist['HIGH'] += int(whiteboard.get('HIGH'))
        if whiteboard.get('MEDIUM') is not None:
            assessment_severity_hist['MEDIUM'] += int(whiteboard.get('MEDIUM'))
        if whiteboard.get('LOW') is not None:
            assessment_severity_hist['LOW'] += int(whiteboard.get('LOW'))


# Generate stuff for automation
bug_response = requests.get('https://bugzilla.mozilla.org/rest/bug', params={'id': '1344762', 'api_key': api_key})
bug_json = bug_response.json()
bug_depends_lists = bug_json['bugs'][0]['depends_on']

automation_severity_hist = {
  'MAXIMUM': 0,
  'HIGH': 0,
  'MEDIUM': 0,
  'LOW': 0
}

for bug_id in bug_depends_lists:
  bug = bugzilla.get(bug_id)
  if bug.status == "RESOLVED" and bug.resolution == "FIXED":
    raw_whiteboard = bug._bug['whiteboard']
    whiteboard = dict(x.split('=') for x in raw_whiteboard.split(' '))
    if whiteboard.get('MAXIMUM') is not None:
      automation_severity_hist['MAXIMUM'] += int(whiteboard.get('MAXIMUM'))
    if whiteboard.get('HIGH') is not None:
      automation_severity_hist['HIGH'] += int(whiteboard.get('HIGH'))
    if whiteboard.get('MEDIUM') is not None:
      automation_severity_hist['MEDIUM'] += int(whiteboard.get('MEDIUM'))
    if whiteboard.get('LOW') is not None:
      automation_severity_hist['LOW'] += int(whiteboard.get('LOW'))

# Generate combined metrics
combined_severity_hist = {
  'MAXIMUM': 0,
  'HIGH': 0,
  'MEDIUM': 0,
  'LOW': 0
}

for key, value in assessment_severity_hist.items():
  combined_severity_hist[key] += value

for key, value in automation_severity_hist.items():
  combined_severity_hist[key] += value

# Report all metrics individual and combined
print("[+] Pentest Assessment Severity Metrics")
print_severities(assessment_severity_hist)

print("[+] Pentest Automation Severity Metrics")
print_severities(automation_severity_hist)

print("[+] Pentest Assessment/Automation Combined Severity Metrics")
print_severities(combined_severity_hist)
